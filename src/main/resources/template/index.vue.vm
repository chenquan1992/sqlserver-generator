<template>
    <div class="table">
        <div class="crumbs">
            <el-breadcrumb separator="/">
                <el-breadcrumb-item><i class="el-icon-tickets"></i> 用户列表</el-breadcrumb-item>
            </el-breadcrumb>
        </div>
        <div class="container">
            <div class="handle-box">
                <el-button type="primary" icon="el-icon-plus" class="handle-del" @click="handleAdd('form')">新增
                </el-button>
                #foreach($column in $columns)
                    <el-input v-model="form.${column.attrname}" placeholder="${column.comments}" class="handle-input" ></el-input>
                #end

                <el-input v-model="form.username" placeholder="账号" class="handle-input" ></el-input>
                <el-input v-model="form.realName" placeholder="姓名" class="handle-input" ></el-input>
                <el-input v-model="form.mobile" placeholder="手机" class="handle-input" ></el-input>
                <el-button type="primary" icon="search" @click="search">搜索</el-button>
            </div>
            <el-table :data="tableData" border style="width: 100%" ref="multipleTable">
                #foreach($column in $columns)
                    #if($column.columnName == $pk.columnName)
                        <el-table-column prop="id" align="center" label="编号" width="50">
                        </el-table-column>
                    #else
                        <el-table-column prop="${column.attrname}" label="${column.comments}" width="120">
                        </el-table-column>
                    #end
                #end
                <el-table-column label="操作" width="180"  align="center">
                    <template slot-scope="scope">
                        <el-button size="mini" @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
                        <el-button size="mini" v-if="scope.row.status == 1" type="danger" @click="handleStatus(0, scope.row)">禁用</el-button>
                        <el-button size="mini" v-if="scope.row.status == 0 || scope.row.status == '' || scope.row.status == null" type="success" @click="handleStatus(1, scope.row)">启用</el-button>
                    </template>
                </el-table-column>
            </el-table>
            <div class="pagination">
                <el-pagination @current-change="handleCurrentChange" layout="prev, pager, next" :total="total">
                </el-pagination>
            </div>
        </div>

        <!-- 新增/修改弹出框 -->
        <el-dialog :title="textMap[dialogStatus]" :visible.sync="insertOrEdit" width="50%" @close="closeDialog('form')">
            <el-container>
                <el-main>
                    <el-form ref="form" :model="form" :rules="rules" label-width="20%">
                        #foreach($column in $columns)
                            <el-form-item label="${column.comments}" prop="${column.attrname}">
                                <el-input v-model="form.${column.attrname}"></el-input>
                            </el-form-item>
                        #end
                    </el-form>
                    <el-footer>
                    <span class="dialog-footer" style="margin: auto;display: table;">
                        <el-button @click="closeDialog('form')">取 消</el-button>
                        <el-button type="primary" @click="addData('form')">保 存</el-button>
                         <el-button @click="resetForm('form')">重 置</el-button>
                    </span>
                    </el-footer>
                </el-main>
            </el-container>
        </el-dialog>

    </div>
</template>

<script>
    export default {
        name: 'basetable',
        data() {
            return {
                page:1,
                total: 0,
                dialogStatus: "",
                textMap: {
                    update: "编辑",
                    create: "添加"
                },
                tableData: [],
                insertOrEdit: false,
                form: {
            #foreach($column in $columns)
                ${column.attrname}:"",
            #end
        },
            rules: {
                #foreach($column in $columns)
                    ${column.attrname}: [
                    {required: true, message: '必填'}
                ],
                #end

            },
        }
        },
        created() {
            this.reload(1);
            this.defaultData = JSON.parse(JSON.stringify(this.form));
        },
        methods: {
            //显示编辑界面
            handleEdit(index, row) {
                this.dialogStatus = "update";
                this.insertOrEdit = true;
                this.resetForm('form');
                this.form = Object.assign({}, row);
            },
            //显示添加界面
            handleAdd(formName) {
                this.dialogStatus = "create";
                this.insertOrEdit = true;
                this.$refs.tree.setCheckedKeys([]);
                this.resetForm('form');
            },
            //添加数据
            addData(formName) {
                ## this.$refs[formName].validate((valid) => {
                if (valid) {
                    this.$confirm("确认提交吗？", "提示", {})
                            .then(() => {
                        this.axios({
                        method: 'post',
                        url: '/${classname}/config/addOrUpdate${className}',
                        data: this.form
                    }).then(response => {
                        if (response.status == 200) {
                        this.insertOrEdit = false;
                        this.resetForm('form');
                        this.reload(null);
                    }
                })
                })
                } else {
                    return false;
                }
            });
            },
            //清空表单
            resetForm(formName) {
                this.form = Object.assign({}, this.defaultData);
                this.$nextTick(() => {//确保dom加载完毕
                    ## this.$refs[formName].clearValidate(); // 清除整个表单的校验
            });
            },
            // 获取页面初始化数据
            reload(val) {
                this.page = val === null ? this.page : val;
                this.axios({
                    method: 'post',
                    url: '/${classname}/config/get${className}ListPage',
                    data:{
                        username:this.form.username,
                        realName:this.form.realName,
                        mobile:this.form.mobile,

                    #foreach($column in $columns)
                        ${column.attrname}:this.form.${column.attrname},
                    #end
                        isPage: true,
                        page:this.page,
                        rows: 10
                    }
                }).then(response => {
                    this.total = response.data.content.total;
                this.tableData = response.data.content.list;
            })
            },
            // 关闭dialog
            closeDialog(formName){
                this.resetForm(formName)
                this.insertOrEdit = false
            },
            // 修改状态
            handleStatus(status,row){
                this.$confirm("确认提交吗？", "提示", {})
                        .then(() => {
                    this.axios({
                    method: 'get',
                    url: '/${classname}/config/edit${className}Status/'+row.id+'/'+status,
                }).then(response => {
                    if (response.status == 200) {
                    this.reload(null);
                }
            })
            })
            },
            // 分页导航
            handleCurrentChange(val) {
                this.reload(val);
            },
            //搜索
            search() {
                this.reload(1);
            }
        }
    }

</script>

<style scoped>
    .handle-box {
        margin-bottom: 20px;
    }

    .handle-input {
        width: 15%;
        display: inline-block;
    }

    .del-dialog-cnt {
        font-size: 16px;
        text-align: center
    }
</style>
